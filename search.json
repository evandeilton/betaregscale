[{"path":"https://evandeilton.github.io/betaregscale/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 betaregscale authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://evandeilton.github.io/betaregscale/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Lopes. Maintainer. J. E.. .","code":""},{"path":"https://evandeilton.github.io/betaregscale/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Lopes, E. J (2023). betaregscale: Regressão beta para dados de escala. R package version 1.1.1, https://evandeilton.github.io/betaregscale/.","code":"@Manual{,   title = {betaregscale: Regressão beta para dados de escala},   author = {{Lopes} and J. E.},   year = {2023},   note = {R package version 1.1.1},   url = {https://evandeilton.github.io/betaregscale/}, }"},{"path":"https://evandeilton.github.io/betaregscale/index.html","id":"betaregscale","dir":"","previous_headings":"","what":"Regressão beta para dados de escala","title":"Regressão beta para dados de escala","text":"O pacote betaregscale oferece uma biblioteca de funções em R para ajuste de modelos de regressão beta para dados oriundos de escalas mapeáveis suporte da distribuição beta, como por exemplo Escaldas de dor, Likert entre outras, modo que incertea instrumento é avaliada de forma intervalar. O framework aqui suporta modelos com dispersão fixa ou variável, tudo paradigma de máxima verossimilhança. São oferecidas ainda, funções para simulações e avaliação desempenho dos modelos processo de estimação e outras para akjuste modelo dados reais. O código-fonte e contribuições podem ser acessados repositório oficial GitHub. Informações detalhadas sobre instalação e uso estão disponíveis na documentação pacote. O betaregscale é voltado para modelagem de dados com variável resposta mapeável em intervalo contínuo, e.g., y = (ys;yi), abrangendo censura à esquerda, direita ou intervalar independente tempo. Aplica-se em pesquisas de opinião, avaliações de produtos, escalas de dor estilo NRS-11, NRS-21 e NRS-101, avaliações de compostos químicos, entre outros. Utilizando distribuição beta, acomoda características dos dados em estrutura de regressão, associando variáveis explicativas à variável resposta intervalar e permitindo preditores lineares para coeficientes relacionados à média e dispersão, fornecendo estimativas robustas e confiáveis dos parâmetros modelo.","code":""},{"path":"https://evandeilton.github.io/betaregscale/index.html","id":"principais-funcionalidades","dir":"","previous_headings":"","what":"Principais funcionalidades","title":"Regressão beta para dados de escala","text":"Entre principais funcionalidades ten-se: Ajuste de modelos de regressão beta com dispersão fixa e variável. Funções para simulação de dados, permitindo avaliação desempenho dos modelos em diferentes cenários. Estatística de bondade ajuste como AIC e BIC, por exemplo em gof(). Funções genéricas como coef, vcov, fitted, residuals, summary e print foram implementadas para classe betaregscale para facilitar o acesso às medidas ajuste. Funções para ajuste e comparação de modelos com diferentes combinações de variáveis explicativas tanto para μ como ϕ. Acesse documentação detalhada de cada função e exemplos de uso neste site para obter informações sobre como utilizar o pacote betaregscale em suas análises.","code":""},{"path":"https://evandeilton.github.io/betaregscale/index.html","id":"instalação","dir":"","previous_headings":"","what":"Instalação","title":"Regressão beta para dados de escala","text":"Você pode instalar o pacote com esse comando abaixo.","code":"if(!require(betaregscale)){   devtools::install_github(\"evandeilton/betaregscale\")   } require(betaregscale, quietly = TRUE)"},{"path":"https://evandeilton.github.io/betaregscale/index.html","id":"exemplos","dir":"","previous_headings":"","what":"Exemplos","title":"Regressão beta para dados de escala","text":"Esses são alguns exemplos de uso das funções pacote.","code":""},{"path":"https://evandeilton.github.io/betaregscale/index.html","id":"simula-dados-do-modelo-beta-intervalar-com-dispersão-fixa","dir":"","previous_headings":"Exemplos","what":"Simula dados do modelo beta intervalar com dispersão fixa","title":"Regressão beta para dados de escala","text":"Esta função gera amostras de variável beta com dispersão fixa usando várias funções de ligação. exemplo seguir em código R, demonstramos como usar função betaregscale_simula_dados para simular dados de variável beta com dispersão fixa: Criamos um conjunto de dados com 100 observações e duas variáveis explicativas independentes (x1 e x2) partir de uma distribuição normal. Utilizamos função beta_ordinal_simula_dados para simular dados com parâmetros personalizados fornecidos. OBS.: type é o tipo de tratamento intervalo m centraliza y ao meio. Ex. Se foi coletado o valor y = 6, transforma-se yt = 6/10 = 0.6. Assim, para tratar incerteza instrumento, sugere-se que medida anotada pode estar limitada yleft = 5.5 e yright = 6.6.","code":"# Criar um conjunto de dados de exemplo set.seed(4255) n <- 200 dados <- data.frame(x1 = rnorm(n),                     x2 = rnorm(n))  dados_simulados <- betaregscale_simula_dados(   formula = ~ x1 + x2,   dados = dados,   betas = c(0.3, -0.6, 0.4),   phi = 1/10,   link = \"logit\",   link_phi = \"logit\",   ncuts = 100,   type = \"m\",   repar = \"2\" ) dados_simulados %>%   head() %>%   knitr::kable(digits = 6, caption = \"\")"},{"path":"https://evandeilton.github.io/betaregscale/index.html","id":"ajuste-de-modelos-com-dispersão-fixa","dir":"","previous_headings":"Exemplos","what":"Ajuste de modelos com dispersão fixa","title":"Regressão beta para dados de escala","text":"Exemplo ajuste com optim direto para uma lista de links Resumo das estimativas e bondade Estimativas ajuste e Bondade Exemplo ajuste com bbmle direto para uma lista de links Gráficos dos perfis de verossimilhança logit probit cauchit cloglog","code":"links <- c(\"logit\",\"probit\",\"cauchit\",\"cloglog\") names(links) <- links  fit_fixo <- purrr::map(links, .f = function(link){   betaregscale(     formula = y ~ x1 + x2,     dados = dados_simulados,     link = link,     link_phi = \"logit\",     repar = \"2\",     num_hessiana = TRUE) }) resumo <- purrr::map(fit_fixo, function(fit){   summary(fit) }) purrr::map_df(resumo, function(res){   res$est   }, .id = \"link\") %>%    knitr::kable(digits = 6, caption = \"\") purrr::map_df(resumo, function(res){   res$gof   }, .id = \"link\") %>%    knitr::kable(digits = 6, caption = \"\") require(bbmle, quietly = TRUE) links <- c(\"logit\",\"probit\",\"cauchit\",\"cloglog\") names(links) <- links  fit_fixo_bbmle <- purrr::map(links, .f = function(link){   betaregscale_bbmle(     formula = y ~ x1 + x2,     dados = dados_simulados,     link = link,     link_phi = \"logit\",     repar = \"2\",     num_hessiana = TRUE) }) fit_fixo_profiles <- purrr::map(fit_fixo_bbmle, profile) purrr::walk(names(fit_fixo_profiles), function(p){   cat(\"\\n+\", p, \"\\n\")   plot(fit_fixo_profiles[[p]]) })"},{"path":"https://evandeilton.github.io/betaregscale/index.html","id":"simula-dados-do-modelo-beta-intervalar-com-dispersão-variável","dir":"","previous_headings":"Exemplos","what":"Simula dados do modelo beta intervalar com dispersão variável","title":"Regressão beta para dados de escala","text":"Neste bloco de código R, é criado um conjunto de dados simulados de um modelo beta com dispersão variável utilizando função betaregscale_simula_dados_z. O processo é resumido abaixo: Definir semente e tamanho da amostra, além das fórmulas para variáveis explicativas x e z. Criar um conjunto de dados de exemplo com 50 observações e quatro variáveis independentes (x1, x2, z1 e z2), geradas partir de distribuições normal e uniforme. Utilizar função betaregscale_simula_dados_z para gerar dados simulados com base nos parâmetros fornecidos, como fórmulas, coeficientes de regressão, funções de ligação e número de pontos de corte.","code":"# Criar um conjunto de dados de exemplo set.seed(2222) n <- 200 fx <- ~ x1 + x2 + x3 fz <- ~ z1 + z2  dados <- data.frame(   x1 = rnorm(n),   x2 = rnorm(n),   x3 = rbinom(n, size = 1, prob = 1/2),   z1 = rnorm(n),   z2 = rnorm(n) )  dados_simulados <- betaregscale_simula_dados_z(   formula_x = fx,   formula_z = fz,   dados = dados,   betas = c(0.2, -0.6, 0.2, 0.2),   zetas = c(0.2, -0.8, 0.6),   link = \"logit\",   link_phi = \"logit\",   ncuts = 100,   type = \"m\",   repar = \"2\" )  dados_simulados %>%    head() %>%   knitr::kable(digits = 6, caption = \"\")"},{"path":"https://evandeilton.github.io/betaregscale/index.html","id":"ajuste-de-modelos-com-dispersão-variável","dir":"","previous_headings":"Exemplos","what":"Ajuste de modelos com dispersão variável","title":"Regressão beta para dados de escala","text":"Exemplo ajuste com optim direto para uma lista de links Resumo das estimativas e bondade Estimativas ajuste e Bondade Exemplo ajuste com bbmle direto para uma lista de links Gráficos dos perfis de verossimilhança logit probit cloglog","code":"links <- c(\"logit\",\"probit\",\"cauchit\",\"cloglog\") names(links) <- links  fit_variavel <- purrr::map(links, .f = function(link){   betaregscale(     formula = y ~x1 + x2 | z1,     dados = dados_simulados,     link = link,     link_phi = \"logit\",     repar = \"2\",     num_hessiana = TRUE) }) resumo <- purrr::map(fit_variavel, function(fit){   summary(fit) }) purrr::map_df(resumo, function(res){   res$est   }, .id = \"link\") %>%    knitr::kable(digits = 6, caption = \"\") purrr::map_df(resumo, function(res){   res$gof   }, .id = \"link\") %>%    knitr::kable(digits = 6, caption = \"\") require(bbmle, quietly = TRUE) links <- c(\"logit\",\"probit\",\"cloglog\") names(links) <- links  fit_variavel_bbmle <- purrr::map(links, .f = function(link){   betaregscale_bbmle(     formula = y ~ x1 + x2 | z1,     dados = dados_simulados,     link = link,     link_phi = \"logit\",     lim = 0.5,     repar = \"2\",     num_hessiana = FALSE) }) fit_variavel_profiles <- purrr::map(fit_variavel_bbmle, function(m){   out <- try(profile(m))   if(!inherits(out, \"try-error\")){     return(out)   } }) purrr::walk(names(fit_variavel_profiles), function(p){   cat(\"\\n+\", p, \"\\n\")   plot(fit_variavel_profiles[[p]]) })"},{"path":"https://evandeilton.github.io/betaregscale/index.html","id":"outras-funções-genéricas","dir":"","previous_headings":"Exemplos","what":"Outras funções genéricas","title":"Regressão beta para dados de escala","text":"","code":"## Resumo das estimativas e bondades summary(fit_fixo$logit)  ## Coeficientes do modelo coef(fit_fixo$logit)  ## Matriz de covariâncias vcov(fit_fixo$logit)  ## Resíduo dos valores preditos em relação ao ponto médio do intervalo de y,  ## isto é (left + right) / 2 resid(fit_fixo$logit)  ## Valores preditos fitted(fit_fixo$logit)  ## Print do modelo print(fit_fixo$logit)"},{"path":[]},{"path":"https://evandeilton.github.io/betaregscale/reference/AIC.betaregscale.html","id":null,"dir":"Reference","previous_headings":"","what":"Critério de Informação de Akaike (AIC) — AIC.betaregscale","title":"Critério de Informação de Akaike (AIC) — AIC.betaregscale","text":"Esta função calcula o Critério de Informação de Akaike (AIC) para objetos das classes 'betaregscale' e 'betaregscaledv'.","code":""},{"path":"https://evandeilton.github.io/betaregscale/reference/AIC.betaregscale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Critério de Informação de Akaike (AIC) — AIC.betaregscale","text":"","code":"# S3 method for betaregscale AIC(object, ..., k = 2)"},{"path":"https://evandeilton.github.io/betaregscale/reference/AIC.betaregscale.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Critério de Informação de Akaike (AIC) — AIC.betaregscale","text":"object Um objeto das classes 'betaregscale' ou 'betaregscaledv'. ... Argumentos extras k Penalidade por parâmetro ser utilizado; o padrão k = 2 é o AIC clássico.","code":""},{"path":"https://evandeilton.github.io/betaregscale/reference/AIC.betaregscale.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Critério de Informação de Akaike (AIC) — AIC.betaregscale","text":"","code":"if (FALSE) { # Exemplo de uso da função AIC # Primeiro, gere um objeto de classe 'betaregscale' ou 'betaregscaledv' set.seed(42) n <- 100 dados <- data.frame(   x1 = rnorm(n, mean = 1, sd = 0.5),   x2 = rbinom(n, size = 1, prob = 0.5),   x3 = rnorm(n, mean = 2, sd = 1)) betas <- c(0.2, 0.3, -0.4, 0.1) formula <- ~x1 + x2 + x3 phi <- 50 dados_simulados <- betaregscale_simula_dados(   formula = formula,   dados = dados,   betas = betas,   phi = phi,   link = \"logit\",   ncuts = 100) fit <- beta_ordinal_fit(  formula = formula,  dados = dados_simulados,  link = \"logit\",  num_hessiana = TRUE) # Em seguida, use a função AIC aic_result <- AIC(fit) }"},{"path":"https://evandeilton.github.io/betaregscale/reference/BIC.html","id":null,"dir":"Reference","previous_headings":"","what":"Critério de Informação Bayesiano (BIC) — BIC","title":"Critério de Informação Bayesiano (BIC) — BIC","text":"Esta função calcula o Critério de Informação Bayesiano (BIC) para objetos das classes 'betaregscale' e 'betaregscaledv'.","code":""},{"path":"https://evandeilton.github.io/betaregscale/reference/BIC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Critério de Informação Bayesiano (BIC) — BIC","text":"","code":"BIC(object)"},{"path":"https://evandeilton.github.io/betaregscale/reference/BIC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Critério de Informação Bayesiano (BIC) — BIC","text":"object Um objeto das classes 'betaregscale' ou 'betaregscaledv'.","code":""},{"path":"https://evandeilton.github.io/betaregscale/reference/BIC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Critério de Informação Bayesiano (BIC) — BIC","text":"","code":"if (FALSE) { # Exemplo de uso da função BIC # Primeiro, gere um objeto de classe 'betaregscale' ou 'betaregscaledv' set.seed(42) n <- 100 dados <- data.frame(   x1 = rnorm(n, mean = 1, sd = 0.5),   x2 = rbinom(n, size = 1, prob = 0.5),   x3 = rnorm(n, mean = 2, sd = 1)) betas <- c(0.2, 0.3, -0.4, 0.1) formula <- ~x1 + x2 + x3 phi <- 50 dados_simulados <- betaregscale_simula_dados(   formula = formula,   dados = dados,   betas = betas,   phi = phi,   link = \"logit\",   ncuts = 100) fit <- beta_ordinal_fit(  formula = formula,  dados = dados_simulados,  link = \"probit\",  num_hessiana = TRUE) # Em seguida, use a função BIC bic_result <- BIC(fit) }"},{"path":"https://evandeilton.github.io/betaregscale/reference/Variaveis.html","id":null,"dir":"Reference","previous_headings":"","what":"Variaveis globais — Variaveis","title":"Variaveis globais — Variaveis","text":"Variaveis globais","code":""},{"path":"https://evandeilton.github.io/betaregscale/reference/betaregscale.html","id":null,"dir":"Reference","previous_headings":"","what":"Ajuste modelo beta com resposta ordinal transformada intervalar — betaregscale","title":"Ajuste modelo beta com resposta ordinal transformada intervalar — betaregscale","text":"Função core que ajusta um modelo beta ordinal para resposta intervalar  usando função optim pacote stats, retornando uma tabela com estatísticas sumarizadas ajuste, tanto para dispesão fixa como variável.","code":""},{"path":"https://evandeilton.github.io/betaregscale/reference/betaregscale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ajuste modelo beta com resposta ordinal transformada intervalar — betaregscale","text":"","code":"betaregscale(   formula,   dados,   link = \"logit\",   link_phi = \"logit\",   acumulada = TRUE,   ncuts = 100,   type = \"m\",   lim = 0.5,   repar = \"2\",   method = \"BFGS\",   num_hessiana = TRUE )"},{"path":"https://evandeilton.github.io/betaregscale/reference/betaregscale.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ajuste modelo beta com resposta ordinal transformada intervalar — betaregscale","text":"formula Fórmula para expressar relação das preditoras X1, X2, Xn relacionadas com os betas e também Z1, Z2, ..., Zn para aquelas relacionadas com phi, se houver. Ela deve ser referenciada em Y. Ex. formula = y ~ X1 + X2 ou formula = y ~ X1 + X2 | Z1 ou formula = y ~ X1 + X2 | Z1 + Z2, etc. Como variável resposta é intervalar ela deverá ser passada como left e right objeto dados. Veja os detalhes para mais informação. dados Um conjunto de dados que contém variável dependente e variáveis independentes especificadas na fórmula. Ele dever conter o limite inferior (left) e o limite superior (right) da variável resposta intervalar Y. link Nome da função de ligação ser usada para preditoras X1, X2, ..., Xn. Pode ser uma das seguintes: \"logit\", \"probit\", \"cauchit\", \"cloglog\" ou \"identity\". O padrão é \"logit\". link_phi Nome da função de ligação ser usada para preditoras Z1, Z2, ..., Zn relacionadas com phi. Pode ser uma das seguintes: \"log\", \"sqrt e \"identity\". O padrão é \"log\". acumulada Se TRUE, retorna verossimilhança pela pbeta, dbeta caso contrário. ncuts Número de cortes para variável ordinal. O padrão é 100. type Tipo de intervalo. \"m\" = meio; \"l\" = esquerda e \"r\" = direita. lim Região de incerteza da medida. Padrão 0.5. repar Tipo de reparametrização sendo 0, 1 ou 2. Padrão 2. method Método ser usado. Veja detalhes em optim num_hessiana Se TRUE, calcula matriz Hessian numericamente com o pacote numDeriv. Se FALSE, calcula com o padrão da optim.","code":""},{"path":"https://evandeilton.github.io/betaregscale/reference/betaregscale.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ajuste modelo beta com resposta ordinal transformada intervalar — betaregscale","text":"Retorna uma lista contendo o resultado da otimização e uma tabela com estatísticas sumarizadas ajuste.","code":""},{"path":"https://evandeilton.github.io/betaregscale/reference/betaregscale.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ajuste modelo beta com resposta ordinal transformada intervalar — betaregscale","text":"","code":"if (FALSE) { n <- 100 dados <- data.frame(x1 = rnorm(n), x2 = rnorm(n),                     z1 = runif(n), z2 = runif(n)) fx <- ~ x1 + x2 fz <- ~ z1 dados_simulados <- betaregscale_simula_dados_z( formula_x = fx, formula_z = fz, dados = dados, betas = c(0.2, -0.5, 0.3), zetas = c(1, 1.2), link = \"logit\", link_phi = \"logit\", ncuts = 100) fit1 <- betaregscale(y ~ x1 + x2, dados = dados_simulados, link = \"logit\", link_phi = \"logit\", num_hessiana = TRUE) print(fit1)  fit2 <- betaregscale(y ~ x1 + x2 | z1, dados = dados_simulados, link = \"logit\", link_phi = \"logit\", num_hessiana = TRUE) print(fit2) }"},{"path":"https://evandeilton.github.io/betaregscale/reference/betaregscale_bbmle.html","id":null,"dir":"Reference","previous_headings":"","what":"Ajuste modelo beta com resposta ordinal transformada intervalar via bbmle — betaregscale_bbmle","title":"Ajuste modelo beta com resposta ordinal transformada intervalar via bbmle — betaregscale_bbmle","text":"Função core que ajusta um modelo beta ordinal para resposta intervalar  usando função optim pacote stats, retornando uma tabela com estatísticas sumarizadas ajuste, tanto para dispesão fixa como variável.","code":""},{"path":"https://evandeilton.github.io/betaregscale/reference/betaregscale_bbmle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ajuste modelo beta com resposta ordinal transformada intervalar via bbmle — betaregscale_bbmle","text":"","code":"betaregscale_bbmle(   formula,   dados,   link = \"logit\",   link_phi = \"logit\",   num_hessiana = TRUE,   acumulada = TRUE,   optimizer = \"optim\",   ncuts = 100,   type = \"m\",   lim = 0.5,   repar = \"2\" )"},{"path":"https://evandeilton.github.io/betaregscale/reference/betaregscale_bbmle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ajuste modelo beta com resposta ordinal transformada intervalar via bbmle — betaregscale_bbmle","text":"formula Fórmula para expressar relação das preditoras X1, X2, Xn relacionadas com os betas e também Z1, Z2, ..., Zn para aquelas relacionadas com phi, se houver. Ela deve ser referenciada em Y. Ex. formula = y ~ X1 + X2 ou formula = y ~ X1 + X2 | Z1 ou formula = y ~X1 + X2 | Z1 + Z2, etc. Como variável resposta é intervalar ela deverá ser passada como left e right objeto dados. Veja os detalhes para mais informação. dados Um conjunto de dados que contém variável dependente e variáveis independentes especificadas na fórmula. Ele dever conter o limite inferior (left) e o limite superior (right) da variável resposta intervalar Y. link Nome da função de ligação ser usada para preditoras X1, X2, ..., Xn. Pode ser uma das seguintes: \"logit\", \"probit\", \"cauchit\", \"cloglog\" ou \"identity\". O padrão é \"logit\". link_phi Nome da função de ligação ser usada para preditoras Z1, Z2, ..., Zn relacionadas com phi. Pode ser uma das seguintes: \"log\", \"sqrt e \"identity\". O padrão é \"log\". num_hessiana Se TRUE, calcula matriz Hessian numericamente com o pacote numDeriv. Se FALSE, calcula com o padrão da optim. acumulada Se TRUE, retorna verossimilhança pela pbeta, dbeta caso contrário. optimizer Algoritmo de otimização. Pode ser \"optim\" (padrão) ou \"nlminb\". Veja mle2 para mais detalhes. ncuts Número de cortes para variável ordinal. O padrão é 100. type Tipo de intervalo. \"m\" = meio; \"l\" = esquerda e \"r\" = direita. lim Região de incerteza da medida. Padrão 0.5. repar Tipo de reparametrização sendo 0, 1 ou 2. Padrão 2.","code":""},{"path":"https://evandeilton.github.io/betaregscale/reference/betaregscale_bbmle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ajuste modelo beta com resposta ordinal transformada intervalar via bbmle — betaregscale_bbmle","text":"Retorna uma lista contendo o resultado da otimização e uma tabela com estatísticas sumarizadas ajuste.","code":""},{"path":"https://evandeilton.github.io/betaregscale/reference/betaregscale_bbmle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ajuste modelo beta com resposta ordinal transformada intervalar via bbmle — betaregscale_bbmle","text":"","code":"if (FALSE) { require(bbmle) n <- 100 dados <- data.frame(x1 = rnorm(n), x2 = rnorm(n),                     z1 = runif(n), z2 = runif(n)) fx <- ~ x1 + x2 fz <- ~ z1 dados_simulados <- betaregscale_simula_dados_z( formula_x = fx, formula_z = fz, dados = dados, betas = c(0.2, -0.5, 0.3), zetas = c(1, 1.2), link = \"logit\", link_phi = \"logit\", ncuts = 100) fit <- betaregscale_bbmle(formula = y ~ x1 + x2|z1, dados = dados_simulados, link = \"logit\", link_phi = \"logit\") p <- profile(fit) plot(p) }"},{"path":"https://evandeilton.github.io/betaregscale/reference/betaregscale_coef.html","id":null,"dir":"Reference","previous_headings":"","what":"Coleta estatística do ajuste — betaregscale_coef","title":"Coleta estatística do ajuste — betaregscale_coef","text":"Coleta estimativas e suas estatísticas para um objeto de ajuste modelo beta ordinal com censura intervalar. Coleta também estatísticas de bondade ajuste como log-verossimilhança, o AIC e o BIC modelo","code":""},{"path":"https://evandeilton.github.io/betaregscale/reference/betaregscale_coef.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coleta estatística do ajuste — betaregscale_coef","text":"","code":"betaregscale_coef(fit, alpha = 0.05)"},{"path":"https://evandeilton.github.io/betaregscale/reference/betaregscale_coef.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coleta estatística do ajuste — betaregscale_coef","text":"fit Objeto sjuste retornado das funções betaregscale_fit e betaregscale_fit_z alpha Nível de significância alpha para os intervalos de confiança. Padrão 0.05 bilateral.","code":""},{"path":"https://evandeilton.github.io/betaregscale/reference/betaregscale_coef.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coleta estatística do ajuste — betaregscale_coef","text":"Lista contendo estimativas coeficientes, suas estatísticas e bondade ajuste.","code":""},{"path":"https://evandeilton.github.io/betaregscale/reference/betaregscale_coef.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coleta estatística do ajuste — betaregscale_coef","text":"","code":"# Simulando dados n <- 50 fx <- ~ x1 + x2 fz <- ~ z1 dados <- data.frame(   x1 = rnorm(n),   x2 = rnorm(n),   z1 = runif(n),   z2 = runif(n)  )  dados_simulados <- betaregscale_simula_dados_z(    formula_x = fx,    formula_z = fz,    dados = dados,    betas = c(0.2,-0.5, 0.3),    zetas = c(1, 1.2),    link = \"logit\",    link_phi = \"logit\",    ncuts = 100    )   fit_z <- betaregscale_fit_z(   formula = y ~ x1 + x2,   dados = dados_simulados,   link = \"logit\",   link_phi = \"logit\",   num_hessiana = TRUE   )  coe <- betaregscale_coef(fit_z) coe$est #>      variable   estimate    ci_lower  ci_upper        se    t_value #> 1 (Intercept)  0.2280171 -0.15879019 0.6148244 0.1973543  1.1553694 #> 2          x1 -0.1117337 -0.48730772 0.2638404 0.1916229 -0.5830912 #> 3          x2  0.3617462  0.02009533 0.7033971 0.1743149  2.0752458 #> 4         phi  0.9123235  0.59805491 1.2265922 0.1603441  5.6897860 #>        p_value #> 1 2.539054e-01 #> 2 5.626798e-01 #> 3 4.358318e-02 #> 4 8.426627e-07 coe$gof #>      logLik     AIC      BIC #> 1 -140.2665 290.533 300.0931"},{"path":"https://evandeilton.github.io/betaregscale/reference/betaregscale_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Função para ajustar um modelo beta — betaregscale_fit","title":"Função para ajustar um modelo beta — betaregscale_fit","text":"função fit_beta_ ajusta um modelo beta usando função optim pacote stats, retornando uma tabela com estatísticas sumarizadas ajuste, incluindo intervalos de confiança e cálculo BIAS.","code":""},{"path":"https://evandeilton.github.io/betaregscale/reference/betaregscale_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Função para ajustar um modelo beta — betaregscale_fit","text":"","code":"betaregscale_fit(   formula,   dados,   link = \"logit\",   link_phi = \"logit\",   ncuts = 100,   type = \"m\",   lim = 0.5,   num_hessiana = TRUE,   acumulada = TRUE,   repar = \"2\",   method = \"BFGS\" )"},{"path":"https://evandeilton.github.io/betaregscale/reference/betaregscale_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Função para ajustar um modelo beta — betaregscale_fit","text":"formula Fórmula para expressar relação das preditoras X1, X2, Xn. Ela deve ser referenciada em Y. Ex. formula = y ~ X1 + X2. Isso porque variável resposta é intervalar. Veja os detalhes para mais informação. dados Um conjunto de dados que contém variável dependente e variáveis independentes especificadas na fórmula. link Nome da função de ligação ser usada. Pode ser uma das seguintes: \"logit\", \"probit\", \"cauchit\", \"cloglog\" ou \"identity\". O padrão é \"logit\". link_phi Função de ligação para phi. Uma dentre \"log\",\"sqrt\",\"identity\" ncuts Número de cortes para variável ordinal. O padrão é 100. type Tipo de intervalo. \"m\" = meio; \"l\" = esquerda e \"r\" = direita. lim Região de incerteza da medida. Padrão 0.5. num_hessiana Se TRUE, calcula matriz Hessian numericamente com o pacote numDeriv. Se FALSE, calcula com o padrão da optim acumulada Se TRUE, retorna verossimilhança pela pbeta, dbeta caso contrário. repar Tipo de reparametrização sendo 0, 1 ou 2. Padrão 2. method Método ser usado. Veja detalhes em optim","code":""},{"path":"https://evandeilton.github.io/betaregscale/reference/betaregscale_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Função para ajustar um modelo beta — betaregscale_fit","text":"Retorna uma lista contendo o resultado da otimização e uma tabela com estatísticas sumarizadas ajuste.","code":""},{"path":"https://evandeilton.github.io/betaregscale/reference/betaregscale_fit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Função para ajustar um modelo beta — betaregscale_fit","text":"","code":"# Criar um conjunto de dados de exemplo set.seed(42) n <- 200 dados <- data.frame(  x1 = rnorm(n, mean = 1, sd = 0.5),  x2 = rbinom(n, size = 1, prob = 0.5),  x3 = rnorm(n, mean = 2, sd = 1)) betas <- c(0.4, -0.6, 0.2) formula <- y ~ x1 + x2 phi <- 1/5 dados_simulados <- betaregscale_simula_dados( formula = ~ x1 + x2, dados = dados, betas = betas, phi = phi, link = \"logit\", link_phi = \"identity\", ncuts = 100, type = \"m\") fit <- betaregscale_fit(  formula = formula,  dados = dados_simulados,  link = \"logit\",  link_phi = \"identity\",  method = \"L-BFGS-B\",  num_hessiana = TRUE)  fit$par #> (Intercept)          x1          x2         phi  #>  0.62260621 -0.80781226  0.05507616  0.20262802"},{"path":"https://evandeilton.github.io/betaregscale/reference/betaregscale_fit_z.html","id":null,"dir":"Reference","previous_headings":"","what":"Função para ajustar um modelo beta ordinal — betaregscale_fit_z","title":"Função para ajustar um modelo beta ordinal — betaregscale_fit_z","text":"função betaregscale ajusta um modelo beta para escala usando função optim pacote stats, retornando uma tabela com estatísticas sumarizadas ajuste, incluindo intervalos de confiança e cálculo BIAS.","code":""},{"path":"https://evandeilton.github.io/betaregscale/reference/betaregscale_fit_z.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Função para ajustar um modelo beta ordinal — betaregscale_fit_z","text":"","code":"betaregscale_fit_z(   formula,   dados,   link = \"logit\",   link_phi = \"logit\",   num_hessiana = TRUE,   acumulada = TRUE,   ncuts = 100,   type = \"m\",   lim = 0.5,   repar = \"2\",   method = \"BFGS\" )"},{"path":"https://evandeilton.github.io/betaregscale/reference/betaregscale_fit_z.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Função para ajustar um modelo beta ordinal — betaregscale_fit_z","text":"formula Fórmula para expressar relação das preditoras X1, X2, Xn relacionadas com os betas e Z1 + Z2 com phi. formula pode ser escrita em forma composta. Isto é, com três partes, como exemplo y ~ x1 + x2 | z1 + z2. Para mais detalhes veja Formula. dados Um conjunto de dados que contém variável dependente e variáveis independentes especificadas na fórmula. link Nome da função de ligação ser usada para preditoras X1, X2, ..., Xn. Pode ser uma das seguintes: \"logit\", \"probit\", \"cauchit\", \"cloglog\" ou \"identity\". O padrão é \"logit\". link_phi Nome da função de ligação ser usada para preditoras Z1, Z2, ..., Zn relacionadas com phi. Pode ser uma das seguintes: \"log\", \"sqrt e \"identity\". O padrão é \"log\". num_hessiana Se TRUE, calcula matriz Hessian numericamente com o pacote numDeriv. Se FALSE, calcula com o padrão da optim acumulada Se TRUE, retorna verossimilhança pela pbeta, dbeta caso contrário. ncuts Número de cortes para variável ordinal. O padrão é 100. type Tipo de intervalo. \"m\" = meio; \"l\" = esquerda e \"r\" = direita. lim Região de incerteza da medida. Padrão 0.5. repar Tipo de reparametrização sendo 0, 1 ou 2. Padrão 2. method Método ser usado. Veja detalhes em optim","code":""},{"path":"https://evandeilton.github.io/betaregscale/reference/betaregscale_fit_z.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Função para ajustar um modelo beta ordinal — betaregscale_fit_z","text":"Retorna uma lista contendo o resultado da otimização e uma tabela com estatísticas sumarizadas ajuste.","code":""},{"path":"https://evandeilton.github.io/betaregscale/reference/betaregscale_fit_z.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Função para ajustar um modelo beta ordinal — betaregscale_fit_z","text":"","code":"n <- 50 dados <- data.frame(   x1 = rnorm(n), x2 = rnorm(n),   z1 = runif(n), z2 = runif(n))  formula <- y ~ x1 + x2 | z1 dados_simulados <- betaregscale_simula_dados_z(  formula_x = ~x1 + x2,  formula_z = ~z1,  dados = dados,  betas = c(0.2, -0.5, 0.3),  zetas = c(1, 1.2),  link = \"logit\",  link_phi = \"logit\",  ncuts = 100)   fit_z <- betaregscale_fit_z(  formula = formula,  dados = dados_simulados,  link = \"logit\",  link_phi = \"logit\",  num_hessiana = TRUE) coe <- betaregscale_coef(fit_z) coe$est #>          variable    estimate   ci_lower    ci_upper        se     t_value #> 1     (Intercept)  0.02866613 -0.3606243  0.41795654 0.1986212  0.14432564 #> 2              x1 -0.46596768 -0.8650152 -0.06692013 0.2035994 -2.28864923 #> 3              x2  0.29925121 -0.1635151  0.76201752 0.2361096  1.26742503 #> 4 phi_(Intercept)  0.90786907  0.4072485  1.40848968 0.2554234  3.55436957 #> 5          phi_z1  0.03402088 -0.8335643  0.90160606 0.4426536  0.07685666 #>        p_value #> 1 0.8858877695 #> 2 0.0268473734 #> 3 0.2115229682 #> 4 0.0009040564 #> 5 0.9390782793 coe$gof #>      logLik      AIC      BIC #> 1 -141.6347 295.2694 306.7415"},{"path":"https://evandeilton.github.io/betaregscale/reference/betaregscale_log_vero.html","id":null,"dir":"Reference","previous_headings":"","what":"Log-verossimilhança do modelo beta ordinal com dispersão fixa — betaregscale_log_vero","title":"Log-verossimilhança do modelo beta ordinal com dispersão fixa — betaregscale_log_vero","text":"Esta função calcula log-verossimilhança de um conjunto de dados para uma variável beta ordinal, aplicando diferentes funções de ligação.","code":""},{"path":"https://evandeilton.github.io/betaregscale/reference/betaregscale_log_vero.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Log-verossimilhança do modelo beta ordinal com dispersão fixa — betaregscale_log_vero","text":"","code":"betaregscale_log_vero(   param,   formula,   dados,   link = \"logit\",   link_phi = \"logit\",   acumulada = TRUE,   ncuts = 100,   type = \"m\",   lim = 0.5,   repar = \"2\" )"},{"path":"https://evandeilton.github.io/betaregscale/reference/betaregscale_log_vero.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log-verossimilhança do modelo beta ordinal com dispersão fixa — betaregscale_log_vero","text":"param Vetor numérico de parâmetros, incluindo coeficientes de regressão e o parâmetro phi. formula Fórmula que indica relação entre variável dependente e variáveis independentes. dados Um conjunto de dados que contém variável dependente e variáveis independentes especificadas na fórmula. link Nome da função de ligação ser usada. Pode ser uma das seguintes: \"logit\", \"probit\", \"cauchit\", \"cloglog\" ou \"identity\". O padrão é \"logit\". link_phi Função de ligação para phi. Uma dentre \"log\",\"sqrt\",\"identity\" acumulada Um valor lógico indicando se log-verossimilhança acumulada deve ser calculada. O padrão é TRUE. ncuts Número de cortes para variável ordinal. O padrão é 100. type Tipo de intervalo. \"m\" = meio; \"l\" = esquerda e \"r\" = direita. lim Região de incerteza da medida. Padrão 0.5. repar Tipo de reparametrização sendo 0, 1 ou 2. Padrão 2.","code":""},{"path":"https://evandeilton.github.io/betaregscale/reference/betaregscale_log_vero.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Log-verossimilhança do modelo beta ordinal com dispersão fixa — betaregscale_log_vero","text":"Retorna soma da log-verossimilhança dos dados.","code":""},{"path":"https://evandeilton.github.io/betaregscale/reference/betaregscale_log_vero.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Log-verossimilhança do modelo beta ordinal com dispersão fixa — betaregscale_log_vero","text":"","code":"# Criar um conjunto de dados de exemplo set.seed(421) dados <- data.frame(x1 = rnorm(100), x2 = rnorm(100)) param <- c(0, 0.5,-0.2, 1 / 5) phi <- 1 / 5 formula <- y ~ x1 + x2 dados_simulados <- betaregscale_simula_dados(  formula = ~ x1 + x2,  dados = dados,  betas = c(0, 0.5,-0.2),  phi = phi,  link = \"logit\",  link_phi = \"logit\",  ncuts = 100,  type = \"m\"  ) log_verossimilhanca <- betaregscale_log_vero(param, formula, dados_simulados) print(log_verossimilhanca) #> [1] -390.8556"},{"path":"https://evandeilton.github.io/betaregscale/reference/betaregscale_log_vero_z.html","id":null,"dir":"Reference","previous_headings":"","what":"Log-verossimilhança do modelo beta ordinal com dispersão variável — betaregscale_log_vero_z","title":"Log-verossimilhança do modelo beta ordinal com dispersão variável — betaregscale_log_vero_z","text":"Esta função calcula log-verossimilhança de um conjunto de dados para uma variável beta ordinal, aplicando diferentes funções de ligação tanto betas de mu como zetas de phi.","code":""},{"path":"https://evandeilton.github.io/betaregscale/reference/betaregscale_log_vero_z.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Log-verossimilhança do modelo beta ordinal com dispersão variável — betaregscale_log_vero_z","text":"","code":"betaregscale_log_vero_z(   param,   formula = y ~ x1 + x2 | z1,   dados,   link = \"logit\",   link_phi = \"logit\",   ncuts = 100,   type = \"m\",   lim = 0.5,   acumulada = TRUE,   repar = \"2\" )"},{"path":"https://evandeilton.github.io/betaregscale/reference/betaregscale_log_vero_z.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log-verossimilhança do modelo beta ordinal com dispersão variável — betaregscale_log_vero_z","text":"param Vetor numérico de parâmetros, incluindo coeficientes de regressão e o parâmetro phi. formula Fórmula para expressar relação das preditoras X1, X2, Xn relacionadas com os betas. Ex. formula = y ~ X1 + X2, y ~ X1 + X2|z1, y ~ X1 + X2 | z1 + z2. dados Um conjunto de dados que contém variável dependente e variáveis independentes especificadas na fórmula. link Nome da função de ligação ser usada para preditoras X1, X2, ..., Xn. Pode ser uma das seguintes: \"logit\", \"probit\", \"cauchit\" ou \"cloglog\". O padrão é \"logit\". link_phi Nome da função de ligação ser usada para preditoras Z1, Z2, ..., Zn  relacionadas com phi. Pode ser uma das seguintes: \"log\", \"sqrt e \"identity\". O padrão é \"log\". ncuts Número de cortes para variável ordinal. O padrão é 100. type Tipo de intervalo. \"m\" = meio; \"l\" = esquerda e \"r\" = direita. lim Região de incerteza da medida. Padrão 0.5. acumulada Um valor lógico indicando se log-verossimilhança acumulada deve ser calculada. O padrão é TRUE. repar Tipo de reparametrização sendo 0, 1 ou 2. Padrão 2.","code":""},{"path":"https://evandeilton.github.io/betaregscale/reference/betaregscale_log_vero_z.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Log-verossimilhança do modelo beta ordinal com dispersão variável — betaregscale_log_vero_z","text":"Retorna soma da log-verossimilhança dos dados.","code":""},{"path":"https://evandeilton.github.io/betaregscale/reference/betaregscale_log_vero_z.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Log-verossimilhança do modelo beta ordinal com dispersão variável — betaregscale_log_vero_z","text":"","code":"# Criar um conjunto de dados de exemplo n <- 100 dados <- data.frame(x1 = rnorm(n), x2 = rnorm(n),                     z1 = runif(n), z2 = runif(n)) fx <- ~ x1 + x2 fz <- ~ z1 dados_simulados <- betaregscale_simula_dados_z(  formula_x = fx,  formula_z = fz,  dados = dados,  betas = c(0.2,-0.5, 0.3),  zetas = c(0.5, -0.5),  link = \"logit\",  link_phi = \"logit\",  repar = \"2\",  ncuts = 100)  # Calcular a log-verossimilhança usando a função betaregscale_log_vero_z log_verossimilhanca <- betaregscale_log_vero_z(   param = c(c(0.2,-0.5, 0.3), c(0.5, -0.5)),   formula = y ~ x1 + x2 | z1,   dados = dados_simulados,   link = \"logit\",   link_phi = \"logit\",   acumulada = TRUE,   repar = \"2\")"},{"path":"https://evandeilton.github.io/betaregscale/reference/betaregscale_simula_dados.html","id":null,"dir":"Reference","previous_headings":"","what":"Simula dados do modelo beta ordinal com dispersão fixa — betaregscale_simula_dados","title":"Simula dados do modelo beta ordinal com dispersão fixa — betaregscale_simula_dados","text":"Esta função simula dados de uma variável beta ordinal com dispersão fixa, aplicando diferentes funções de ligação.","code":""},{"path":"https://evandeilton.github.io/betaregscale/reference/betaregscale_simula_dados.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simula dados do modelo beta ordinal com dispersão fixa — betaregscale_simula_dados","text":"","code":"betaregscale_simula_dados(   formula,   dados,   betas,   phi = 1/5,   link = \"logit\",   link_phi = \"logit\",   ncuts = 100,   type = \"m\",   lim = 0.5,   repar = \"2\" )"},{"path":"https://evandeilton.github.io/betaregscale/reference/betaregscale_simula_dados.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simula dados do modelo beta ordinal com dispersão fixa — betaregscale_simula_dados","text":"formula Fórmula que indica relação entre variável dependente e variáveis independentes. O padrão é ~x1 + x2. dados Um conjunto de dados que contém variáveis independentes especificadas na fórmula. betas Vetor numérico de coeficientes de regressão. O padrão é c(0, 0.5, -0.2). phi Parâmetro positivo que controla dispersão da distribuição beta. O padrão é 50. link Nome da função de ligação ser usada. Pode ser uma das seguintes: \"logit\", \"probit\", \"cauchit\", \"cloglog\" ou \"identity\". O padrão é \"logit\". link_phi Nome da função de ligação ser usada para transformar phi. ncuts Número de cortes para variável ordinal. O padrão é 100. type Tipo de intervalo. \"m\" = meio; \"l\" = esquerda e \"r\" = direita. lim Limite numérico ser utilizado para ajustar os intervalos. O padrão é 0.5. repar Tipo de reparametrização sendo 0, 1 ou 2. Padrão 2.","code":""},{"path":"https://evandeilton.github.io/betaregscale/reference/betaregscale_simula_dados.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simula dados do modelo beta ordinal com dispersão fixa — betaregscale_simula_dados","text":"Retorna um data.frame contendo os dados simulados da variável  beta ordinal e variáveis independentes.","code":""},{"path":"https://evandeilton.github.io/betaregscale/reference/betaregscale_simula_dados.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simula dados do modelo beta ordinal com dispersão fixa — betaregscale_simula_dados","text":"","code":"# Criar um conjunto de dados de exemplo set.seed(421) n <- 100 dados <- data.frame(   x1 = rnorm(n),   x2 = rnorm(n)  ) formula <- ~ x1 + x2 dados_simulados <- betaregscale_simula_dados(  formula = formula,  dados = dados,  betas = c(0.2,-0.5, 0.3),  link = \"logit\",  link_phi = \"logit\",  ncuts = 100,  phi = 1/2,  repar = \"2\"  )"},{"path":"https://evandeilton.github.io/betaregscale/reference/betaregscale_simula_dados_z.html","id":null,"dir":"Reference","previous_headings":"","what":"Simula dados do modelo beta ordinal com dispersão variável — betaregscale_simula_dados_z","title":"Simula dados do modelo beta ordinal com dispersão variável — betaregscale_simula_dados_z","text":"Esta função simula dados de uma variável beta ordinal, aplicando diferentes funções de ligação tanto para betas como para zetas de phi","code":""},{"path":"https://evandeilton.github.io/betaregscale/reference/betaregscale_simula_dados_z.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simula dados do modelo beta ordinal com dispersão variável — betaregscale_simula_dados_z","text":"","code":"betaregscale_simula_dados_z(   formula_x = ~x1 + x2,   formula_z = ~z1 + z2,   dados,   betas = c(0, 0.5, -0.2),   zetas = c(1, 0.5, 0.2),   link = \"logit\",   link_phi = \"logit\",   ncuts = 100,   type = \"m\",   lim = 0.5,   repar = \"2\" )"},{"path":"https://evandeilton.github.io/betaregscale/reference/betaregscale_simula_dados_z.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simula dados do modelo beta ordinal com dispersão variável — betaregscale_simula_dados_z","text":"formula_x Fórmula para expressar relação das preditoras X1, X2, Xn relacionadas com os betas. Ela deve ser referenciada em Y. Ex. formula = ~X1 + X2. Isso porque variável resposta é intervalar. Veja os detalhes para mais informação. formula_z Fórmula para expressar relação das preditoras Z1, Z2, Zn relacionadas com os phi's modelo se regressão beta com preditoas em phi. Ela deve ser referenciada em Y. Ex. formula = ~Z1 + Z2. Isso porque variável resposta é intervalar. Veja os detalhes para mais informação. dados Um conjunto de dados que contém variável dependente e variáveis independentes especificadas nas fórmulas. betas Vetor de betas associados aos preditores de X utilizados para simular da beta. zetas Vetor de zetas associados aos preditores de Z utilizados para simular da beta com dispersão variável. link Nome da função de ligação ser usada para preditoras X1, X2, ..., Xn. Pode ser uma das seguintes: \"logit\", \"probit\", \"cauchit\", \"cloglog\" ou \"identity\".  O padrão é \"logit\". link_phi Nome da função de ligação ser usada para preditoras Z1, Z2, ..., Zn relacionadas com phi. Pode ser uma das seguintes: \"log\", \"sqrt e \"identity\". O padrão é \"log\". ncuts Número de cortes para variável ordinal. O padrão é 100. type Tipo de intervalo. \"m\" = meio; \"l\" = esquerda e \"r\" = direita. lim Limite numérico ser utilizado para ajustar os intervalos. O padrão é 0.5. repar Tipo de reparametrização sendo 0, 1 ou 2. Padrão 2.","code":""},{"path":"https://evandeilton.github.io/betaregscale/reference/betaregscale_simula_dados_z.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simula dados do modelo beta ordinal com dispersão variável — betaregscale_simula_dados_z","text":"Retorna um data.frame contendo os dados simulados da variável beta ordinal e variáveis independentes.","code":""},{"path":"https://evandeilton.github.io/betaregscale/reference/betaregscale_simula_dados_z.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simula dados do modelo beta ordinal com dispersão variável — betaregscale_simula_dados_z","text":"","code":"# Criar um conjunto de dados de exemplo set.seed(421) n <- 100 dados <- data.frame(   x1 = rnorm(n),   x2 = rnorm(n),   z1 = runif(n),   z2 = runif(n)  ) dados_simulados <- betaregscale_simula_dados_z(  formula_x = ~ x1 + x2,  formula_z = ~ z1 + z2,  dados = dados,  betas = c(0.2,-0.5, 0.3),  zetas = c(0.2, -0.4, 0.2),  link = \"logit\",  link_phi = \"logit\",  ncuts = 100,  repar = \"2\"  )"},{"path":"https://evandeilton.github.io/betaregscale/reference/cls-betaregscale.html","id":null,"dir":"Reference","previous_headings":"","what":"Classe betaregscale — cls betaregscale","title":"Classe betaregscale — cls betaregscale","text":"Classe betaregscale","code":""},{"path":"https://evandeilton.github.io/betaregscale/reference/coef.betaregscale.html","id":null,"dir":"Reference","previous_headings":"","what":"Coeficientes — coef.betaregscale","title":"Coeficientes — coef.betaregscale","text":"Esta função retorna os coeficientes para objetos das classes 'betaregscale' e 'betaregscaledv'.","code":""},{"path":"https://evandeilton.github.io/betaregscale/reference/coef.betaregscale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coeficientes — coef.betaregscale","text":"","code":"# S3 method for betaregscale coef(object, ...)"},{"path":"https://evandeilton.github.io/betaregscale/reference/coef.betaregscale.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coeficientes — coef.betaregscale","text":"object Um objeto das classes 'betaregscale' ou 'betaregscaledv'. ... outros argumentos.","code":""},{"path":"https://evandeilton.github.io/betaregscale/reference/coef.betaregscale.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coeficientes — coef.betaregscale","text":"","code":"if (FALSE) { # Exemplo de uso da função hessian # Primeiro, gere um objeto de classe 'betaregscale' ou 'betaregscaledv' set.seed(42) n <- 100 dados <- data.frame(   x1 = rnorm(n, mean = 1, sd = 0.5),   x2 = rbinom(n, size = 1, prob = 0.5),   x3 = rnorm(n, mean = 2, sd = 1)) betas <- c(0.2, 0.3, -0.4, 0.1) formula <- ~x1 + x2 + x3 phi <- 50 dados_simulados <- betaregscale_simula_dados(   formula = formula,   dados = dados,   betas = betas,   phi = phi,   link = \"logit\",   ncuts = 100) fit <- beta_ordinal_fit(  formula = formula,  dados = dados_simulados,  link = \"probit\",  num_hessiana = TRUE) coef(fit) }"},{"path":"https://evandeilton.github.io/betaregscale/reference/est.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimativas e intervalos de confiança — est","title":"Estimativas e intervalos de confiança — est","text":"Esta função retorna estimativas, erros padrão, intervalos de confiança e valores-p para objetos das classes 'betaregscale' e 'betaregscaledv'.","code":""},{"path":"https://evandeilton.github.io/betaregscale/reference/est.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimativas e intervalos de confiança — est","text":"","code":"est(object, alpha = 0.05)"},{"path":"https://evandeilton.github.io/betaregscale/reference/est.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimativas e intervalos de confiança — est","text":"object Um objeto das classes 'betaregscale' ou 'betaregscaledv'. alpha Nível de significância para os intervalos de confiança (padrão é 0,05).","code":""},{"path":"https://evandeilton.github.io/betaregscale/reference/est.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimativas e intervalos de confiança — est","text":"Retorna um data.frame contendo estimativas, erros padrão, intervalos de confiança, estatísticas t e valores-p objeto fornecido.","code":""},{"path":"https://evandeilton.github.io/betaregscale/reference/est.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimativas e intervalos de confiança — est","text":"","code":"if (FALSE) { # Exemplo de uso da função hessian # Primeiro, gere um objeto de classe 'betaregscale' ou 'betaregscaledv' set.seed(42) n <- 100 dados <- data.frame(   x1 = rnorm(n, mean = 1, sd = 0.5),   x2 = rbinom(n, size = 1, prob = 0.5),   x3 = rnorm(n, mean = 2, sd = 1)) betas <- c(0.2, 0.3, -0.4, 0.1) formula <- ~x1 + x2 + x3 phi <- 50 dados_simulados <- betaregscale_simula_dados(   formula = formula,   dados = dados,   betas = betas,   phi = phi,   link = \"logit\",   ncuts = 100) fit <- beta_ordinal_fit(  formula = formula,  dados = dados_simulados,  link = \"probit\",  num_hessiana = TRUE) est(fit) }"},{"path":"https://evandeilton.github.io/betaregscale/reference/fitted.betaregscale.html","id":null,"dir":"Reference","previous_headings":"","what":"Valores ajustados — fitted.betaregscale","title":"Valores ajustados — fitted.betaregscale","text":"Esta função retorna os valores ajustados (mu ou phi) para objetos das classes 'betaregscale' e 'betaregscaledv'.","code":""},{"path":"https://evandeilton.github.io/betaregscale/reference/fitted.betaregscale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Valores ajustados — fitted.betaregscale","text":"","code":"# S3 method for betaregscale fitted(object, type = \"mu\", ...)"},{"path":"https://evandeilton.github.io/betaregscale/reference/fitted.betaregscale.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Valores ajustados — fitted.betaregscale","text":"object Um objeto das classes 'betaregscale' ou 'betaregscaledv'. type Tipo de valor ajustado ser retornado: \"mu\" ou \"phi\" (padrão é \"mu\"). ... Outros argumentos","code":""},{"path":"https://evandeilton.github.io/betaregscale/reference/fitted.betaregscale.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Valores ajustados — fitted.betaregscale","text":"","code":"if (FALSE) { # Exemplo de uso da função hessian # Primeiro, gere um objeto de classe 'betaregscale' ou 'betaregscaledv' set.seed(42) n <- 100 dados <- data.frame(   x1 = rnorm(n, mean = 1, sd = 0.5),   x2 = rbinom(n, size = 1, prob = 0.5),   x3 = rnorm(n, mean = 2, sd = 1)) betas <- c(0.2, 0.3, -0.4, 0.1) formula <- ~x1 + x2 + x3 phi <- 50 dados_simulados <- betaregscale_simula_dados(   formula = formula,   dados = dados,   betas = betas,   phi = phi,   link = \"logit\",   ncuts = 100) fit <- beta_ordinal_fit(  formula = formula,  dados = dados_simulados,  link = \"probit\",  num_hessiana = TRUE) fitted(fit) }"},{"path":"https://evandeilton.github.io/betaregscale/reference/fn_check_response.html","id":null,"dir":"Reference","previous_headings":"","what":"Verifica e ajusta os limites superior e inferior de uma variável resposta. — fn_check_response","title":"Verifica e ajusta os limites superior e inferior de uma variável resposta. — fn_check_response","text":"Essa função verifica e ajusta os limites superior e inferior de uma variável resposta, com base tipo de intervalo especificado (\"m\", \"l\" ou \"r\") e número de quebras.","code":""},{"path":"https://evandeilton.github.io/betaregscale/reference/fn_check_response.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Verifica e ajusta os limites superior e inferior de uma variável resposta. — fn_check_response","text":"","code":"fn_check_response(y, type = \"m\", ncuts = 100L, lim = 0.5)"},{"path":"https://evandeilton.github.io/betaregscale/reference/fn_check_response.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Verifica e ajusta os limites superior e inferior de uma variável resposta. — fn_check_response","text":"y Variável resposta numérica. type Caractere que indica o tipo de intervalo ser utilizado. Deve ser um dos seguintes: \"m\" (meio), \"l\" (esquerda) ou \"r\" (direita). O padrão é \"m\". ncuts Número inteiro que representa quantidade de quebras serem aplicadas. O padrão é 100L. lim Limite numérico ser utilizado para ajustar os intervalos. O padrão é 0.5.","code":""},{"path":"https://evandeilton.github.io/betaregscale/reference/fn_check_response.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Verifica e ajusta os limites superior e inferior de uma variável resposta. — fn_check_response","text":"Retorna uma matriz com os limites ajustados para variável resposta.","code":""},{"path":"https://evandeilton.github.io/betaregscale/reference/fn_check_response.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Verifica e ajusta os limites superior e inferior de uma variável resposta. — fn_check_response","text":"","code":"y <- c(0, 3, 5, 7, 9, 10) result <- fn_check_response(y, type = \"m\", ncuts = 10)"},{"path":"https://evandeilton.github.io/betaregscale/reference/fn_switch_link.html","id":null,"dir":"Reference","previous_headings":"","what":"Seleção das funções de ligação inversas — fn_switch_link","title":"Seleção das funções de ligação inversas — fn_switch_link","text":"Função para escolher e aplicar funções de ligação inversas aos preditores de X e Z","code":""},{"path":"https://evandeilton.github.io/betaregscale/reference/fn_switch_link.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Seleção das funções de ligação inversas — fn_switch_link","text":"","code":"fn_switch_link(eta, link)"},{"path":"https://evandeilton.github.io/betaregscale/reference/fn_switch_link.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Seleção das funções de ligação inversas — fn_switch_link","text":"eta Preditor linear dado por X*param. link Função de ligação escolhida.","code":""},{"path":"https://evandeilton.github.io/betaregscale/reference/fn_switch_link.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Seleção das funções de ligação inversas — fn_switch_link","text":"Valor de mu, resultante da aplicação da transformação inversa em eta.","code":""},{"path":"https://evandeilton.github.io/betaregscale/reference/gof.html","id":null,"dir":"Reference","previous_headings":"","what":"Medidas de ajuste — gof","title":"Medidas de ajuste — gof","text":"Esta função retorna um conjunto de medidas de ajuste, incluindo log-verossimilhança, AIC e BIC, para objetos das classes 'betaregscale' e 'betaregscaledv'.","code":""},{"path":"https://evandeilton.github.io/betaregscale/reference/gof.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Medidas de ajuste — gof","text":"","code":"gof(object)"},{"path":"https://evandeilton.github.io/betaregscale/reference/gof.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Medidas de ajuste — gof","text":"object Um objeto das classes 'betaregscale' ou 'betaregscaledv'.","code":""},{"path":"https://evandeilton.github.io/betaregscale/reference/gof.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Medidas de ajuste — gof","text":"Retorna um data.frame contendo log-verossimilhança, AIC e BIC objeto fornecido.","code":""},{"path":"https://evandeilton.github.io/betaregscale/reference/gof.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Medidas de ajuste — gof","text":"","code":"if (FALSE) { # Exemplo de uso da função hessian # Primeiro, gere um objeto de classe 'betaregscale' ou 'betaregscaledv' set.seed(42) n <- 100 dados <- data.frame(   x1 = rnorm(n, mean = 1, sd = 0.5),   x2 = rbinom(n, size = 1, prob = 0.5),   x3 = rnorm(n, mean = 2, sd = 1)) betas <- c(0.2, 0.3, -0.4, 0.1) formula <- ~x1 + x2 + x3 phi <- 50 dados_simulados <- betaregscale_simula_dados(   formula = formula,   dados = dados,   betas = betas,   phi = phi,   link = \"logit\",   ncuts = 100) fit <- beta_ordinal_fit(  formula = formula,  dados = dados_simulados,  link = \"probit\",  num_hessiana = TRUE) gof(fit) }"},{"path":"https://evandeilton.github.io/betaregscale/reference/hessian.html","id":null,"dir":"Reference","previous_headings":"","what":"Matriz hessiana — hessian","title":"Matriz hessiana — hessian","text":"Esta função retorna matriz hessiana para objetos das classes 'betaregscale' e 'betaregscaledv'.","code":""},{"path":"https://evandeilton.github.io/betaregscale/reference/hessian.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Matriz hessiana — hessian","text":"","code":"hessian(object)"},{"path":"https://evandeilton.github.io/betaregscale/reference/hessian.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Matriz hessiana — hessian","text":"object Um objeto das classes 'betaregscale' ou 'betaregscaledv'.","code":""},{"path":"https://evandeilton.github.io/betaregscale/reference/hessian.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Matriz hessiana — hessian","text":"","code":"if (FALSE) { # Exemplo de uso da função hessian # Primeiro, gere um objeto de classe 'betaregscale' ou 'betaregscaledv' set.seed(42) n <- 100 dados <- data.frame(   x1 = rnorm(n, mean = 1, sd = 0.5),   x2 = rbinom(n, size = 1, prob = 0.5),   x3 = rnorm(n, mean = 2, sd = 1)) betas <- c(0.2, 0.3, -0.4, 0.1) formula <- ~x1 + x2 + x3 phi <- 50 dados_simulados <- betaregscale_simula_dados(   formula = formula,   dados = dados,   betas = betas,   phi = phi,   link = \"logit\",   ncuts = 100) fit <- beta_ordinal_fit(  formula = formula,  dados = dados_simulados,  link = \"probit\",  num_hessiana = TRUE) # Em seguida, use a função hessian hessian_result <- hessian(fit) }"},{"path":"https://evandeilton.github.io/betaregscale/reference/logLik.betaregscale.html","id":null,"dir":"Reference","previous_headings":"","what":"Log-verossimilhança — logLik.betaregscale","title":"Log-verossimilhança — logLik.betaregscale","text":"Esta função calcula log-verossimilhança negativa para objetos das classes 'betaregscale' e 'betaregscaledv'.","code":""},{"path":"https://evandeilton.github.io/betaregscale/reference/logLik.betaregscale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Log-verossimilhança — logLik.betaregscale","text":"","code":"# S3 method for betaregscale logLik(object, ...)"},{"path":"https://evandeilton.github.io/betaregscale/reference/logLik.betaregscale.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log-verossimilhança — logLik.betaregscale","text":"object Um objeto das classes 'betaregscale' ou 'betaregscaledv'. ... Argumentos extras","code":""},{"path":"https://evandeilton.github.io/betaregscale/reference/logLik.betaregscale.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Log-verossimilhança — logLik.betaregscale","text":"","code":"if (FALSE) { # Exemplo de uso da função logLik # Primeiro, gere um objeto de classe 'betaregscale' ou 'betaregscaledv' set.seed(42) n <- 100 dados <- data.frame(   x1 = rnorm(n, mean = 1, sd = 0.5),   x2 = rbinom(n, size = 1, prob = 0.5),   x3 = rnorm(n, mean = 2, sd = 1)) betas <- c(0.2, 0.3, -0.4, 0.1) formula <- ~x1 + x2 + x3 phi <- 50 dados_simulados <- betaregscale_simula_dados(   formula = formula,   dados = dados,   betas = betas,   phi = phi,   link = \"logit\",   ncuts = 100) fit <- beta_ordinal_fit(  formula = formula,  dados = dados_simulados,  link = \"probit\",  num_hessiana = TRUE) # Em seguida, use a função logLik.betaregscale log_likelihood <- logLik(fit) }"},{"path":"https://evandeilton.github.io/betaregscale/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://evandeilton.github.io/betaregscale/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://evandeilton.github.io/betaregscale/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://evandeilton.github.io/betaregscale/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling `rhs(lhs)`.","code":""},{"path":"https://evandeilton.github.io/betaregscale/reference/predict.betaregscale.html","id":null,"dir":"Reference","previous_headings":"","what":"Quantis preditos — predict.betaregscale","title":"Quantis preditos — predict.betaregscale","text":"Esta função retorna previsões de quantis para objetos das classes 'betaregscale' e 'betaregscaledv'.","code":""},{"path":"https://evandeilton.github.io/betaregscale/reference/predict.betaregscale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quantis preditos — predict.betaregscale","text":"","code":"# S3 method for betaregscale predict(object, newdata = NULL, type = \"quantile\", at = 0.5, repar = \"2\", ...)"},{"path":"https://evandeilton.github.io/betaregscale/reference/predict.betaregscale.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quantis preditos — predict.betaregscale","text":"object Um objeto das classes 'betaregscale' ou 'betaregscaledv'. newdata Novo dataset com variáveis para o predict type Tipo de previsão ser retornado: \"quantile\" (padrão é \"quantile\"). Valor numérico entre 0 e 1 para o qual o quantil é desejado (padrão é 0,5). repar Tipo de reparametrização sendo 0, 1 ou 2. Padrão 2. ... Outros argumentos","code":""},{"path":"https://evandeilton.github.io/betaregscale/reference/predict.betaregscale.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quantis preditos — predict.betaregscale","text":"","code":"if (FALSE) { # Exemplo de uso da função hessian # Primeiro, gere um objeto de classe 'betaregscale' ou 'betaregscaledv' set.seed(42) n <- 100 dados <- data.frame(   x1 = rnorm(n, mean = 1, sd = 0.5),   x2 = rbinom(n, size = 1, prob = 0.5),   x3 = rnorm(n, mean = 2, sd = 1)) betas <- c(0.2, 0.3, -0.4, 0.1) formula <- ~x1 + x2 + x3 phi <- 50 dados_simulados <- betaregscale_simula_dados(   formula = formula,   dados = dados,   betas = betas,   phi = phi,   link = \"logit\",   ncuts = 100) fit <- beta_ordinal_fit(  formula = formula,  dados = dados_simulados,  link = \"probit\",  num_hessiana = TRUE) predict(fit) }"},{"path":"https://evandeilton.github.io/betaregscale/reference/print.betaregscale.html","id":null,"dir":"Reference","previous_headings":"","what":"Print — print.betaregscale","title":"Print — print.betaregscale","text":"Esta função imprime um resumo objeto das classes 'betaregscale' e 'betaregscaledv' fornecido, incluindo estimativas, erros padrão, valores t e valores-p.","code":""},{"path":"https://evandeilton.github.io/betaregscale/reference/print.betaregscale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print — print.betaregscale","text":"","code":"# S3 method for betaregscale print(x, digits = max(3, getOption(\"digits\") - 2), ...)"},{"path":"https://evandeilton.github.io/betaregscale/reference/print.betaregscale.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print — print.betaregscale","text":"x Um objeto das classes 'betaregscale' ou 'betaregscaledv'. digits Número de dígitos significativos para impressão dos valores (padrão é max(3, getOption(\"digits\") - 2)). ... outros parametros","code":""},{"path":"https://evandeilton.github.io/betaregscale/reference/print.betaregscale.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print — print.betaregscale","text":"","code":"if (FALSE) { # Exemplo de uso da função hessian # Primeiro, gere um objeto de classe 'betaregscale' ou 'betaregscaledv' set.seed(42) n <- 100 dados <- data.frame(   x1 = rnorm(n, mean = 1, sd = 0.5),   x2 = rbinom(n, size = 1, prob = 0.5),   x3 = rnorm(n, mean = 2, sd = 1)) betas <- c(0.2, 0.3, -0.4, 0.1) formula <- ~x1 + x2 + x3 phi <- 50 dados_simulados <- betaregscale_simula_dados(   formula = formula,   dados = dados,   betas = betas,   phi = phi,   link = \"logit\",   ncuts = 100) fit <- beta_ordinal_fit(  formula = formula,  dados = dados_simulados,  link = \"probit\",  num_hessiana = TRUE) print(fit) }"},{"path":"https://evandeilton.github.io/betaregscale/reference/residuals.betaregscale.html","id":null,"dir":"Reference","previous_headings":"","what":"Resíduos do modelo — residuals.betaregscale","title":"Resíduos do modelo — residuals.betaregscale","text":"Esta função retorna os resíduos para objetos das classes 'betaregscale' e 'betaregscaledv'.","code":""},{"path":"https://evandeilton.github.io/betaregscale/reference/residuals.betaregscale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Resíduos do modelo — residuals.betaregscale","text":"","code":"# S3 method for betaregscale residuals(   object,   type = c(\"rqa\", \"deviance\", \"pearson\", \"response\", \"weighted\", \"sweighted\"),   ... )"},{"path":"https://evandeilton.github.io/betaregscale/reference/residuals.betaregscale.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Resíduos do modelo — residuals.betaregscale","text":"object Um objeto das classes 'betaregscale' ou 'betaregscaledv'. type Tipo de resíduo. Um entre \"rqa\",\"deviance\", \"pearson\", \"response\", \"weighted\", \"sweighted\". O padrão é Resíduo Quantílico Aleatorizado (rqa) ... Outros argumentos","code":""},{"path":"https://evandeilton.github.io/betaregscale/reference/residuals.betaregscale.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Resíduos do modelo — residuals.betaregscale","text":"","code":"if (FALSE) { # Exemplo de uso da função hessian # Primeiro, gere um objeto de classe 'betaregscale' ou 'betaregscaledv' set.seed(42) n <- 100 dados <- data.frame(   x1 = rnorm(n, mean = 1, sd = 0.5),   x2 = rbinom(n, size = 1, prob = 0.5),   x3 = rnorm(n, mean = 2, sd = 1)) betas <- c(0.2, 0.3, -0.4, 0.1) formula <- ~x1 + x2 + x3 phi <- 50 dados_simulados <- betaregscale_simula_dados(   formula = formula,   dados = dados,   betas = betas,   phi = phi,   link = \"logit\",   ncuts = 100) fit <- beta_ordinal_fit(  formula = formula,  dados = dados_simulados,  link = \"probit\",  num_hessiana = TRUE) residuals(fit) }"},{"path":"https://evandeilton.github.io/betaregscale/reference/summary.betaregscale.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary — summary.betaregscale","title":"Summary — summary.betaregscale","text":"Esta função retorna um resumo das estimativas, erros padrão, intervalos de confiança e valores-p para objetos das classes 'betaregscale' e 'betaregscaledv'.","code":""},{"path":"https://evandeilton.github.io/betaregscale/reference/summary.betaregscale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary — summary.betaregscale","text":"","code":"# S3 method for betaregscale summary(object, ..., alpha = 0.05)"},{"path":"https://evandeilton.github.io/betaregscale/reference/summary.betaregscale.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary — summary.betaregscale","text":"object Um objeto das classes 'betaregscale' ou 'betaregscaledv'. ... Outros argumentos alpha Nível de significância para os intervalos de confiança (padrão é 0,05).","code":""},{"path":"https://evandeilton.github.io/betaregscale/reference/summary.betaregscale.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary — summary.betaregscale","text":"Retorna um resumo das estimativas, erros padrão, intervalos de confiança e valores-p objeto fornecido.","code":""},{"path":"https://evandeilton.github.io/betaregscale/reference/summary.betaregscale.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary — summary.betaregscale","text":"","code":"if (FALSE) { # Exemplo de uso da função hessian # Primeiro, gere um objeto de classe 'betaregscale' ou 'betaregscaledv' set.seed(42) n <- 100 dados <- data.frame(   x1 = rnorm(n, mean = 1, sd = 0.5),   x2 = rbinom(n, size = 1, prob = 0.5),   x3 = rnorm(n, mean = 2, sd = 1)) betas <- c(0.2, 0.3, -0.4, 0.1) formula <- ~x1 + x2 + x3 phi <- 50 dados_simulados <- betaregscale_simula_dados(   formula = formula,   dados = dados,   betas = betas,   phi = phi,   link = \"logit\",   ncuts = 100) fit <- beta_ordinal_fit(  formula = formula,  dados = dados_simulados,  link = \"probit\",  num_hessiana = TRUE) # Em seguida, use a função summary.betaregscale summary_result <- summary.betaregscale(fit, alpha = 0.05) }"},{"path":"https://evandeilton.github.io/betaregscale/reference/vcov.betaregscale.html","id":null,"dir":"Reference","previous_headings":"","what":"Matriz de covariância — vcov.betaregscale","title":"Matriz de covariância — vcov.betaregscale","text":"Esta função retorna matriz de covariância para objetos das classes 'betaregscale' e 'betaregscaledv'.","code":""},{"path":"https://evandeilton.github.io/betaregscale/reference/vcov.betaregscale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Matriz de covariância — vcov.betaregscale","text":"","code":"# S3 method for betaregscale vcov(object, ...)"},{"path":"https://evandeilton.github.io/betaregscale/reference/vcov.betaregscale.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Matriz de covariância — vcov.betaregscale","text":"object Um objeto das classes 'betaregscale' ou 'betaregscaledv'. ... Outros parametros","code":""},{"path":"https://evandeilton.github.io/betaregscale/reference/vcov.betaregscale.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Matriz de covariância — vcov.betaregscale","text":"","code":"if (FALSE) { # Exemplo de uso da função hessian # Primeiro, gere um objeto de classe 'betaregscale' ou 'betaregscaledv' set.seed(42) n <- 100 dados <- data.frame(   x1 = rnorm(n, mean = 1, sd = 0.5),   x2 = rbinom(n, size = 1, prob = 0.5),   x3 = rnorm(n, mean = 2, sd = 1)) betas <- c(0.2, 0.3, -0.4, 0.1) formula <- ~x1 + x2 + x3 phi <- 50 dados_simulados <- betaregscale_simula_dados(   formula = formula,   dados = dados,   betas = betas,   phi = phi,   link = \"logit\",   ncuts = 100) fit <- beta_ordinal_fit(  formula = formula,  dados = dados_simulados,  link = \"probit\",  num_hessiana = TRUE) vcov(fit) }"}]
